[{"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/index.tsx":"1","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/reportWebVitals.ts":"2","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/App.tsx":"3","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/store/localStorage.ts":"4","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/store/store.ts":"5","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/grid/index.tsx":"6","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/reducer/grid.ts":"7","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/grid/grid.tsx":"8","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/functions/generate.ts":"9","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/tile/tile.tsx":"10","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/auth/SignUp.tsx":"11","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/reducer/userevents.ts":"12"},{"size":500,"mtime":1611420380286,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1611420380286,"results":"15","hashOfConfig":"14"},{"size":843,"mtime":1612960534176,"results":"16","hashOfConfig":"14"},{"size":518,"mtime":1612301136221,"results":"17","hashOfConfig":"14"},{"size":726,"mtime":1612971588971,"results":"18","hashOfConfig":"14"},{"size":55,"mtime":1611750868203,"results":"19","hashOfConfig":"14"},{"size":2022,"mtime":1612295269550,"results":"20","hashOfConfig":"14"},{"size":4188,"mtime":1612447056797,"results":"21","hashOfConfig":"14"},{"size":326,"mtime":1612447437930,"results":"22","hashOfConfig":"14"},{"size":280,"mtime":1612440193748,"results":"23","hashOfConfig":"14"},{"size":2157,"mtime":1612959788153,"results":"24","hashOfConfig":"14"},{"size":1035,"mtime":1612989344501,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13i7ioe",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/index.tsx",[],[],"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/reportWebVitals.ts",["58"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/App.tsx",[],"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/store/localStorage.ts",["59","60","61"],"import { ITile } from '../../interfaces/Tile';\nimport { Board } from '../reducer/grid';\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('tiles');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    //\n  }\n};\n\nexport const saveState = (state: ITile[]) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('tiles', serializedState);\n  } catch (err) {\n    //\n  }\n};\n","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/store/store.ts",["62"],"import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { BoardReducer } from '../reducer/grid';\nimport { UserReducer } from '../reducer/userevents';\nimport { loadState, saveState } from './localStorage';\n\nexport const rootReducer = combineReducers({\n  tiles: BoardReducer,\n  users: UserReducer,\n});\nexport type Rootstate = ReturnType<typeof rootReducer>;\n\nconst middleWare = applyMiddleware(thunk);\n\nconst composeEnhancer = composeWithDevTools({});\n\nexport const persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  composeEnhancer(middleWare)\n);\n\nexport { store };\n","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/grid/index.tsx",[],"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/reducer/grid.ts",[],"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/grid/grid.tsx",["63"],"/** @format */\n\nimport React, { FC, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Rootstate } from '../../redux/store/store';\nimport { TileDiv } from '../tile/tile';\nimport {\n  Board,\n  SetColorAction,\n  setTilesAction,\n} from '../../redux/reducer/grid';\nimport { ITile } from '../../interfaces/Tile';\nimport styled from 'styled-components';\n\nconst Container = styled.span`\n  display: inline-flex;\n  align-items: center;\n  width: 150px;\n  padding: 4px 12px;\n  border: 1px solid black;\n  border-radius: 4px;\n\n  input[type='color'] {\n    border: none;\n    background: none;\n    &::-webkit-color-swatch-wrapper {\n      border: 1px solid black;\n      border-radius: 4px;\n    }\n  }\n\n  input[type='text'] {\n    border: none;\n    width: 100%;\n    font-size: 14px;\n  }\n  input[type='number'] {\n    border: none;\n    width: 100%;\n    font-size: 14px;\n  }\n`;\n\nconst ButtonContainer = styled.button`\n  display: inline-flex;\n  align-items: center;\n  padding: 4px 12px;\n  border: 1px solid black;\n  border-radius: 4px;\n  justify-content: center;\n`;\n\n//Grid Style\n\ntype GridProps = {\n  columnSize: number;\n  rowSize: number;\n};\n\nconst GridContainer = styled.div<GridProps>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.columnSize}, 1fr);\n  grid-template-rows: repeat(${(props) => props.rowSize}, 1fr);\n`;\n\nconst Grid: FC = () => {\n  const dispatch = useDispatch();\n  const [columns, setColumns] = useState(8);\n  const [rows, setRows] = useState(8);\n  const [inputTile, setInputTile] = useState(64);\n  const [inputColor, setInputColor] = useState('#000000');\n\n  const tiles = useSelector<Rootstate, ITile[]>((state) => state.tiles.tiles);\n\n  useEffect(() => {\n    handleTileAmount();\n    dispatch(setTilesAction(inputTile));\n  }, [inputTile, rows, columns]);\n\n  //calculate Tiles\n  const calculateTiles = (rows: number, columns: number): number => {\n    return rows * columns;\n  };\n\n  // change state of  column each change\n  const handleRowChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRows(parseInt(event.currentTarget.value));\n  };\n\n  // change state of  column each change\n  const handleColumnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setColumns(parseInt(event.currentTarget.value));\n  };\n\n  //change amount of tiles\n  const handleTileAmount = () => {\n    return setInputTile(calculateTiles(columns, rows));\n  };\n\n  //change state of color picker\n  const handleColorState = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputColor(event.currentTarget.value);\n  };\n\n  //change color state of tile\n  const handleTileState = (tileId: string, color: string) => {\n    dispatch(SetColorAction(tileId, color));\n  };\n\n  // const colorRange = (start: number, end: number, length = end - start + 1) => {\n  //   Array.from({ length }, (_, i) => (\n  //     <div onClick={handleColorState()} className={`color-${start + i}`}></div>\n  //   ));\n  // };\n  return (\n    <div className=\"board\">\n      <div className=\"form\">\n        <Container>\n          <input\n            name=\"column\"\n            type=\"number\"\n            onChange={handleColumnChange}\n            value={columns}\n          />\n        </Container>\n        <Container>\n          <input\n            name=\"row\"\n            type=\"number\"\n            onChange={handleRowChange}\n            value={rows}\n          />\n        </Container>\n        <Container>\n          <input type=\"color\" value={inputColor} onChange={handleColorState} />\n          <input type=\"text\" value={inputColor} />\n        </Container>\n        <ButtonContainer>FILL</ButtonContainer>\n        <ButtonContainer>SAVE</ButtonContainer>\n        <ButtonContainer>CLEAR</ButtonContainer>\n      </div>\n      <GridContainer columnSize={columns} rowSize={rows}>\n        {tiles.map((item) => {\n          return (\n            <TileDiv\n              width={80 / columns}\n              height={80 / rows}\n              key={item.id}\n              id={item.id}\n              color={item.color}\n              onClick={() => handleTileState(item.id, inputColor)}\n            />\n          );\n        })}\n      </GridContainer>\n    </div>\n  );\n};\n\nexport default Grid;\n","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/functions/generate.ts",[],"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/tile/tile.tsx",[],[],"/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/components/auth/SignUp.tsx",["64","65"],"import React, { useRef } from 'react';\nimport { Form, Card, Button } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { auth } from '../../firebase';\n\nexport const SignUp = () => {\n  const [user, setUser] = React.useState({\n    email: '',\n    password: '',\n  });\n\n  const [confirmed, setConfirmed] = React.useState(false);\n\n  const email = useRef<HTMLInputElement>(null);\n  const password = useRef<HTMLInputElement>(null);\n  const passwordConfirm = useRef<HTMLInputElement>(null);\n\n  const handleChange = () => {\n    if (email.current && password.current) {\n      setUser({\n        ...user,\n        email: email.current.value,\n        password: password.current.value,\n      });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (passwordConfirm && passwordConfirm.current) {\n      if (user.password !== passwordConfirm.current.value) {\n        alert('check password');\n        return;\n      }\n      console.log(user);\n      setConfirmed(true);\n    }\n  };\n\n  return confirmed ? (\n    <Redirect to=\"/grid\" />\n  ) : (\n    <Card>\n      <Card.Body>\n        <h2>Sign Up</h2>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              onChange={handleChange}\n              ref={email}\n              type=\"email\"\n              required\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              ref={password}\n              onChange={handleChange}\n              type=\"password\"\n              required\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              ref={passwordConfirm}\n              onChange={handleChange}\n              type=\"password\"\n              required\n            />\n          </Form.Group>\n          <Button className=\"w-100\" type=\"submit\">\n            Submit\n          </Button>\n          <Link to=\"/grid\">GridGame</Link>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","/home/gblur/Desktop/react/React-Projects/sprite-exporter/src/redux/reducer/userevents.ts",["66","67","68","69","70"],"import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nexport interface IUser {\n  id: string;\n  email: string;\n  password: string;\n}\n\ninterface UserState {\n  byIDs: Record<IUser['id'], IUser>;\n}\n\nconst initialState: UserState = {\n  byIDs: {},\n};\n\nconst logIn = 'users/login';\n\ninterface loginAction extends Action<typeof logIn> {\n  payload: IUser;\n}\n\nconst validateLogin: ThunkAction<\n  Promise<void>,\n  undefined,\n  undefined,\n  loginAction\n> = async (dispatch, getState) => {\n  try {\n    const user: Omit<IUser, 'id'> = {\n      email: 'John',\n      password: 'stringify',\n    };\n    const response = await fetch(\n      'https://sprite-app-default-rtdb.firebaseio.com/',\n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(user),\n      }\n    );\n  } catch (e) {\n    // \n  }\n};\n\nconst UserReducer = (state: UserState = initialState, action: loginAction) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport { UserReducer };\n",{"ruleId":"71","severity":1,"message":"72","line":3,"column":25,"nodeType":"73","messageId":"74","endLine":3,"endColumn":57},{"ruleId":"75","severity":1,"message":"76","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":4,"column":26,"nodeType":"73","messageId":"74","endLine":4,"endColumn":31},{"ruleId":"71","severity":1,"message":"72","line":16,"column":26,"nodeType":"73","messageId":"74","endLine":16,"endColumn":45},{"ruleId":"75","severity":1,"message":"79","line":6,"column":21,"nodeType":"77","messageId":"78","endLine":6,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":8,"column":3,"nodeType":"77","messageId":"78","endLine":8,"endColumn":8},{"ruleId":"75","severity":1,"message":"80","line":4,"column":10,"nodeType":"77","messageId":"78","endLine":4,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":6,"column":23,"nodeType":"73","messageId":"74","endLine":6,"endColumn":28},{"ruleId":"75","severity":1,"message":"81","line":24,"column":7,"nodeType":"77","messageId":"78","endLine":29,"endColumn":2},{"ruleId":"75","severity":1,"message":"82","line":29,"column":12,"nodeType":"77","messageId":"78","endLine":29,"endColumn":20},{"ruleId":"75","severity":1,"message":"83","line":29,"column":22,"nodeType":"77","messageId":"78","endLine":29,"endColumn":30},{"ruleId":"75","severity":1,"message":"84","line":35,"column":11,"nodeType":"77","messageId":"78","endLine":35,"endColumn":19},{"ruleId":"71","severity":1,"message":"72","line":48,"column":21,"nodeType":"73","messageId":"74","endLine":48,"endColumn":78},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'Board' is defined but never used.","Identifier","unusedVar","'saveState' is defined but never used.","'auth' is defined but never used.","'validateLogin' is assigned a value but never used.","'dispatch' is defined but never used.","'getState' is defined but never used.","'response' is assigned a value but never used."]